<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
			http://www.springframework.org/schema/context 
			http://www.springframework.org/schema/context/spring-context-4.3.xsd
			http://www.springframework.org/schema/tx
			http://www.springframework.org/schema/tx/spring-tx-4.3.xsd ">
	<!-- 加载配置文件 -->
	<!-- 读取外部文件中的键值对（用${}调用） -->
	
	<context:property-placeholder location="classpath:config.properties" />
	<context:component-scan base-package="com.kdt.testMaven3">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!-- 扫描service自动注入为bean -->
	<!-- <context:component-scan base-package="org.andy.work.service.impl,org.andy.work.dao.impl" 
		/> -->
	<!-- 配置数据源 c3p0 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 请求超时时间 -->
		<property name="checkoutTimeout" value="30000" />
		<!-- 每60秒检查所有连接池中的空闲连接。默认值: 0，不检查 -->
		<property name="idleConnectionTestPeriod" value="30" />
		<!-- 连接数据库连接池最大空闲时间 -->
		<property name="maxIdleTime" value="30" />
		<!-- 连接池初始化连接数 -->
		<property name="initialPoolSize" value="5" />
		<property name="minPoolSize" value="5" />
		<property name="maxPoolSize" value="20" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 -->
		<property name="acquireIncrement" value="5" />
	</bean>

	<!-- 配置hibernate的SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<!-- 注入数据源 相关信息看源码 -->
		<property name="dataSource" ref="dataSource" />
		<!-- <property name="mappingLocations">
			<list>
				<value>/*.hbm.xml</value>
			</list>
		</property> -->
		<!-- hibernate配置信息 -->
		<!-- <property name="packagesToScan">
            <list>
                可以加多个包
                <value>com.wechat.entity.po</value>
            </list>
        </property> -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<!-- 默认就是使用SpringSessionContext -->
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate5.SpringSessionContext</prop>
				<!-- <prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop> -->
			</props>
		</property>
		<property name="mappingResources"> <!-- 实体类配置文件 --> 
			<list>
			<value>AndroidNews.hbm.xml</value>
             <value>iOSNews.hbm.xml</value> 
			</list>  
        </property>
        
		<!-- <property name="hibernateProperties"> <props> <prop key="hibernate.dialect">${hibernate.dialect}</prop> 
			<prop key="hibernate.show_sql">${hibernate.show_sql}</prop> <prop key="hibernate.format_sql">${hibernate.format_sql}</prop> 
			<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop> 开启二级缓存 
			ehcache <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop> 
			<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop> 
			<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop> 
			<prop key="hibernate.cache.provider_configuration_file_resource_path">${hibernate.cache.provider_configuration_file_resource_path} 
			</prop> </props> </property> -->
		<!-- 扫描hibernate注解配置的entity -->
		<!-- <property name="packagesToScan" value="org.andy.work.entity" /> -->
	</bean>
	<!-- 这里面大概包含了hibernate自带的增删改查方法 -->
	<!-- <bean id="hibernateTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean> -->
          <!--   手动开启@Transaction注解 -->
    <tx:annotation-driven proxy-target-class="true" transaction-manager="transactionManager"/>
	
	
	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean> 
	<!-- bean -->
	<!-- <bean id="newsService" class="com.kdt.testMaven3.service.NewsService">
	</bean> -->
	<bean id="androidNewsDAO" class="com.kdt.testMaven3.DaoImpl.AndroidNewsDAOImpl">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<bean id="iosNewsDAO" class="com.kdt.testMaven3.DaoImpl.iOSNewsDAOImpl">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<bean id="androidNewsService" class="com.kdt.testMaven3.serviceImpl.AndroidNewsServiceImpl">
	</bean>
	<bean id="iosNewsService" class="com.kdt.testMaven3.serviceImpl.iOSNewsServiceImpl">
	</bean>
	<!-- 配置事务增强处理Bean，指定事务管理器 -->
	<!-- <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		配置详细事务处理语义
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="load*" propagation="SUPPORTS" read-only="true" />
			其他采用默认事务方式
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice> -->
	<!-- <bean id="androidNewsDAOimpl" class="com.kdt.testMaven3.Impl.AndroidNewsDAOImpl"></bean> -->
	<!-- Spring aop事务管理 -->
	<!-- <aop:config> 配置切入点 <aop:pointcut id="transactionPointcut" expression="execution(* 
		org.andy.work.service..*Impl.*(..))" /> 指定在txAdvice切入点应用txAdvice事务增强处理 <aop:advisor 
		pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" /> </aop:config> -->
</beans>